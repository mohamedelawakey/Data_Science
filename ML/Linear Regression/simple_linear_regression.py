# -*- coding: utf-8 -*-
"""simple linear regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ChKDNd6Q6nxrcpIr9ZXlhtAVQ3xilmLx
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

import google.colab
google.colab.drive.mount('/content/drive')

data = pd.read_csv('/content/drive/MyDrive/dataset/Salary_Data.csv')
data

data.tail()

data.info()

data.describe()

sns.pairplot(data) # to know we can do it linear or no

x = data['YearsExperience']
y = data['Salary']

# data.iloc[:, :-1]
# data.iloc[:, 1]

x.head()

y.head()

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=24)

model = LinearRegression()
model.fit(x_train.values.reshape(-1, 1), y_train)

model.score(x_train.values.reshape(-1, 1), y_train)

model.score(x_test.values.reshape(-1, 1), y_test)

plt.scatter(x_train, y_train, color = 'red')
plt.plot(x_train, model.predict(x_train.values.reshape(-1, 1)), color = 'blue')
plt.title('Salary vs Experience (Training Set)')
plt.xlabel('Years of Experience')
plt.ylabel('Salary')
plt.show()

y_pred = model.predict(x_test.values.reshape(-1, 1))
plt.scatter(x_test, y_test, color = 'red')
plt.plot(x_test, y_pred, color = 'blue')
plt.title('Salary vs Experience (test Set)')
plt.xlabel('Years of Experience')
plt.ylabel('Salary')
plt.show()

c = [i for i in range(1, len(y_test) + 1)]
plt.plot(c, y_test, color = 'red', linestyle = '-')
plt.plot(c, y_pred, color = 'blue', linestyle = '-')
plt.title('Actual vs Predicted')
plt.xlabel('Number of test examples')
plt.ylabel('Salary')
plt.show()

c = [i for i in range(1, len(y_test) + 1)]
plt.plot(c, y_test - y_pred, color = 'red', linestyle = '-')
plt.title('Actual vs Predicted')
plt.xlabel('Number of test examples')
plt.ylabel('Salary')
plt.show()

mse  = mean_squared_error(y_test, y_pred)
mse

rsq = r2_score(y_test, y_pred)
rsq

print('intercept = ', model.intercept_)
print('slope = ', model.coef_)

y_hat = model.predict([[2.2]])
y_hat